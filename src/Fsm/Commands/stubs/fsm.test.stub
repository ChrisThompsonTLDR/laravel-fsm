<?php

declare(strict_types=1);

namespace {{testNamespace}};

use {{definitionNamespace}}\\{{fsmDefinitionClass}};
use {{enumNamespace}}\\{{fsmEnumClass}};
use {{modelFqnPlaceholder}};
use Fsm\\Events\\TransitionSucceeded;
use Fsm\\FsmRegistry;
use Fsm\\FsmBuilder;
use Illuminate\\Support\\Facades\\Event;
// use Illuminate\\Foundation\\Testing\\RefreshDatabase;
use Tests\\FsmTestCase;
use PHPUnit\\Framework\\Attributes\\Test;

/**
 * @mixin \\Tests\\FsmTestCase
 */
class {{testClass}} extends FsmTestCase
{
    // Enable if your tests interact with the database.
    // use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        // If your FSM isn't auto-discovered you can register it manually.
        // $fsmRegistry = $this->app->make(FsmRegistry::class);
        // $fsmBuilder = $this->app->make(FsmBuilder::class);
        // {{fsmDefinitionClass}}::defineFsm($fsmBuilder);
        // $definition = $fsmBuilder->getDefinition({{modelClassPlaceholder}}::class, '{{statusColumnPlaceholder}}');
        // if ($definition) {
        //     $fsmRegistry->registerDefinition({{modelClassPlaceholder}}::class, '{{statusColumnPlaceholder}}', $definition->buildRuntimeDefinition());
        // }
    }

    #[Test]
    public function it_can_transition_between_states(): void
    {
        Event::fake();

        $model = {{modelClassPlaceholder}}::factory()->create([
            '{{statusColumnPlaceholder}}' => {{fsmEnumClass}}::{{enumStateOne}}->value,
        ]);

        $this->assertTrue(
            $model->canTransitionFsm('{{statusColumnPlaceholder}}', {{fsmEnumClass}}::{{enumStateTwo}})
        );

        $model->transitionFsm('{{statusColumnPlaceholder}}', {{fsmEnumClass}}::{{enumStateTwo}});

        $this->assertEquals(
            {{fsmEnumClass}}::{{enumStateTwo}}->value,
            $model->fresh()->{{statusColumnPlaceholder}}
        );

        Event::assertDispatched(TransitionSucceeded::class);
    }
}
